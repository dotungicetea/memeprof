import { prisma } from "@/utils/prisma";
import { Metadata, ResolvingMetadata } from "next";
import Image from "next/image";
import classNames from "classnames/bind";
import styles from "./MemeShare.module.scss";
import { Typography } from "@/components/Typography";
import Link from "next/link";
import { Button } from "@radix-ui/themes";

const cn = classNames.bind(styles);

type Props = {
  params: { id: string };
  searchParams: { [key: string]: string | string[] | undefined };
};

export const dynamic = "force-dynamic";

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  const id = params.id;

  const meme = await prisma.meme.findUnique({
    where: {
      id: id,
    },
    select: {
      caption: true,
      url: true,
    },
  });

  return {
    twitter: {
      card: "summary_large_image",
      title: "Meme generated by memeProf memeGPT",
      description: meme?.caption!,
      creator: "@memeProf",
      images: [meme?.url!],
    },
  };
}

export default async function Page({ params, searchParams }: Props) {
  const memeId = params.id;

  const meme = await prisma.meme.findUnique({
    where: {
      id: memeId,
    },
    select: {
      caption: true,
      url: true,
    },
  });

  return (
    <div className={cn("meme")}>
      <div className={cn("meme__image-box")}>
        <Image
          src={meme?.url!}
          alt={meme?.caption!}
          fill
          sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          className={cn("meme__image")}
        />
      </div>
      <div className={cn("meme__content")}>
        <Typography variant="caption">
          This meme is generated by
          <Link href="https://t.me/MemeProfBot" className={cn("meme__link")}>
            {" "}
            memeprofbot
          </Link>
        </Typography>
        <Link className={cn("meme__button")} href="https://t.me/MemeProfBot">
          Create Meme
        </Link>
      </div>
    </div>
  );
}
